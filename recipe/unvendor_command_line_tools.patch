diff --git a/setup.py b/setup.py
index 41b12c0..fbf0699 100644
--- a/setup.py
+++ b/setup.py
@@ -12,72 +12,13 @@
 with open(dirname / "README.md") as file:
     long_description = file.read()
 
-executables = ["es_to_frames", "event_rate", "size", "spatiospectrogram", "spectrogram"]
-
 if not "-h" in sys.argv and not "--help" in sys.argv:
-    manifest_lines = [
-        "include command_line_tools/source/*.hpp",
-        "include command_line_tools/source/*.cpp",
-        "include command_line_tools/premake4.lua",
-        "include command_line_tools/third_party/pontella/source/pontella.hpp",
-        "include command_line_tools/third_party/sepia/source/sepia.hpp",
-        "include command_line_tools/third_party/tarsier/source/replicate.hpp",
-        "include command_line_tools/third_party/tarsier/source/stitch.hpp",
-        "include command_line_tools/third_party/stb_truetype.hpp",
-        "include command_line_tools/third_party/monaco.ttf.base64.hpp",
-        "include command_line_tools/third_party/lodepng/lodepng.h",
-        "include command_line_tools/third_party/lodepng/lodepng.cpp",
-    ]
+    manifest_lines = []
     if "sdist" in sys.argv:
         manifest_lines.append(f"include configuration-schema.json")
     else:
         shutil.rmtree(dirname / "charidotella" / "assets", ignore_errors=True)
         (dirname / "charidotella" / "assets").mkdir()
-        if sys.platform == "win32":
-            subprocess.run(
-                ["premake4", "vs2010"], cwd=dirname / "command_line_tools", check=True
-            )
-            for executable in executables:
-                subprocess.run(
-                    [
-                        "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin\\MsBuild.exe",
-                        "/p:PlatformToolset=v142",
-                        "/property:Configuration=Release",
-                        f"{executable}.vcxproj",
-                    ],
-                    check=True,
-                    cwd=dirname / "command_line_tools" / "build",
-                )
-                (dirname / "charidotella" / "assets" / executable).unlink(
-                    missing_ok=True
-                )
-                shutil.copy2(
-                    dirname
-                    / "command_line_tools"
-                    / "build"
-                    / "release"
-                    / f"{executable}.exe",
-                    dirname / "charidotella" / "assets" / executable,
-                )
-        else:
-            if not (dirname / "command_line_tools" / "build" / "Makefile").is_file():
-                subprocess.run(
-                    ["premake4", "gmake"],
-                    check=True,
-                    cwd=dirname / "command_line_tools",
-                )
-            for executable in executables:
-                subprocess.run(
-                    ["make", executable],
-                    check=True,
-                    cwd=dirname / "command_line_tools" / "build",
-                )
-                shutil.copy2(
-                    dirname / "command_line_tools" / "build" / "release" / executable,
-                    dirname / "charidotella" / "assets" / executable,
-                )
-        for executable in executables:
-            manifest_lines.append(f"include charidotella/assets/{executable}")
         shutil.copy2(
             dirname / "configuration-schema.json",
             dirname / "charidotella" / "assets" / "configuration-schema.json",
@@ -122,13 +63,6 @@
         "scipy",
         "toml",
     ],
-    ext_modules=[
-        setuptools.extension.Extension(
-            "charidotella_extension_placeholder",
-            language="cpp",
-            sources=["charidotella/charidotella_extension_placeholder.c"],
-        ),
-    ],
     entry_points={
         "console_scripts": [
             "charidotella = charidotella:main",
